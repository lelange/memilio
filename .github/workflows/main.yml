name: CI

on: 
  schedule:
    - cron: "40 2 * * *"
  push:
    branches:
      - 'main'
    tags:
      - version-*
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
  workflow_dispatch:

jobs:
  build-cpp-gcc_clang:
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        compiler: ["gcc", "clang"]
        config: ["Debug", "Release"]
        version: ["latest", "min"]
        include:
          - version: "latest"
            os: "ubuntu-latest"
          - version: "min"
            os: "ubuntu-18.04"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/linux-build
        with: 
          compiler: ${{ matrix.compiler }}
          config: ${{ matrix.config }}
          version: ${{ matrix.version }}
          coverage: ${{ (matrix.compiler == 'gcc' && matrix.config == 'Debug' && matrix.version == 'latest') && 'ON' || 'OFF' }} # `c && t || f` is (usually) equivalent to `c ? t : f`
          sanitize-addr: ${{ (matrix.compiler == 'gcc' && matrix.config == 'Debug' && matrix.version == 'latest') && 'ON' || 'OFF' }}
          sanitize-ub: ${{ (matrix.compiler == 'gcc' && matrix.config == 'Debug' && matrix.version == 'latest') && 'ON' || 'OFF' }}

  build-cpp-gcc-no-optional-deps:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/linux-build
        with:
          compiler: gcc
          version: latest
          config: Release
          optional-dependencies: OFF

  build-cpp-msvc:
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        config: ["Debug", "Release"]
        version: ["latest", "min"]
        include:
          - version: "latest"
            os: "windows-latest"
          - version: "min"
            os: "windows-2016"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/windows-build
        with: 
          config: ${{ matrix.config }}
          version: ${{ matrix.version }}

  build-cpp-msvc-no-optional-deps:
    if: github.event.pull_request.draft == false
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/windows-build
        with: 
          config: Release
          version: latest
          optional-dependencies: OFF

  test-cpp-gcc_clang:
    if: github.event.pull_request.draft == false
    needs: build-cpp-gcc_clang
    strategy:
      matrix:
        compiler: ["gcc", "clang"]
        config: ["Debug", "Release"]
        version: ["latest", "min"]
        include:
          - version: "latest"
            os: "ubuntu-latest"
          - version: "min"
            os: "ubuntu-18.04"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/linux-test
        with: 
          build-artifact: build-cpp-linux-${{ matrix.compiler }}-${{ matrix.version }}-${{ matrix.config }}-full
          coverage: ${{ (matrix.compiler == 'gcc' && matrix.version == 'latest' && matrix.config == 'Debug') && 'ON' || 'OFF' }}
  
  test-linux-no-optional-deps:
    if: github.event.pull_request.draft == false
    needs: build-cpp-gcc-no-optional-deps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/linux-test
        with: 
          build-artifact: build-cpp-linux-gcc-latest-Release-part

  test-cpp-msvc:
    if: github.event.pull_request.draft == false
    needs: build-cpp-msvc
    strategy:
      matrix:
        config: ["Debug", "Release"]
        version: ["latest", "min"]
        include:
          - version: "latest"
            os: "windows-latest"
          - version: "min"
            os: "windows-2016"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/windows-test
        with: 
          build-artifact: build-cpp-windows-msvc-${{ matrix.version }}-${{ matrix.config }}-full

  test-windows-no-optional-deps:
    if: github.event.pull_request.draft == false
    needs: build-cpp-msvc-no-optional-deps
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/windows-test
        with: 
          build-artifact: build-cpp-windows-msvc-latest-Release-part

  build-py:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux2014_x86_64
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/build-py
          
  test-docs:
    if: github.event.pull_request.draft == false
    needs: build-py
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/test-docs

  test-py:
    if: github.event.pull_request.draft == false
    needs: build-py
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/test-py

  test-pylint:
    if: github.event.pull_request.draft == false
    needs: build-py
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/test-pylint

  dowload-data:
    if: github.event.pull_request.draft == false
    needs: build-py
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq -y install python3-pip gnupg
          python -m pip install --upgrade pip
      - name: Download Python Wheels
        uses: actions/download-artifact@v2
        with:
          name: python-wheels
          path: pycode/wheelhouse
      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Install Python Wheels
        run: |
          for pkg in `ls pycode/wheelhouse/*36*.whl`; do python -m pip install $pkg; done
      - name: Dowload Data
        run: |
          mkdir -p data_dl
          getrkidata -o data_dl
          getpopuldata -o data_dl
          getjhdata -o data_dl
          getdividata -o data_dl
      - name: Upload Data
        uses: actions/upload-artifact@v2
        with:
          name: data
          path: |
            data_dl/*.json
            data_dl/Germany/*.json
            data_dl/Spain/*.json
            data_dl/France/*.json
            data_dl/Italy*.json
            data_dl/SouthKorea/*.json
            data_dl/US/*.json
            data_dl/China/*.json
          retention-days: 1
          
  codecov:
    if: github.event.pull_request.draft == false
    needs: [test-py, test-cpp-gcc_clang]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq -y install git curl
      - name: Download python coverage report
        uses: actions/download-artifact@v2
        with:
          name: test-py-coverage-reports
      - name: Download cpp coverage report
        uses: actions/download-artifact@v2
        with:
          name: test-cpp-coverage-reports
      - name: Deploy to codecov.io
        uses: codecov/codecov-action@v2
        with:
          files: ./pycode/test/coverage_python.xml,./coverage.info
          verbose: true

  pages:
    if: github.event.pull_request.draft == false
    needs: [test-py, test-cpp-gcc_clang, test-docs, test-pylint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq -y install git
      - name: Download python coverage report
        uses: actions/download-artifact@v2
        with:
          name: test-py-coverage-reports
      - name: Download cpp coverage report
        uses: actions/download-artifact@v2
        with:
          name: test-cpp-coverage-reports
      - name: Download documentation
        uses: actions/download-artifact@v2
        with:
          name: documentation
          path: docs/html
      - name: Download pylint report
        uses: actions/download-artifact@v2
        with:
          name: pylint-report
          path: pycode/build_pylint
      - name: Prepare basic Pages sites
        run: |
          mkdir -p public
          cp ci_index/main_index.html public/index.html
          cp ci_index/branch_index.html public/index.html
      - name: Prepare documentation
        run: |
          mkdir -p public/documentation
          cp -r docs/html/* public/documentation
      - name: Prepare pylint reports
        run: |
          mkdir -p public/pylint
          cp pycode/build_pylint/pylint.html public/pylint/
      - name: Prepare coverage reports
        run: |
          mkdir -p public/coverage
          mkdir -p public/coverage/cpp
          mkdir -p public/coverage/python
          cp -r coverage_python/* public/coverage/python/
          cp -r coverage/* public/coverage/cpp/
      - name: Upload pages as artifact
        uses: actions/upload-artifact@v2
        if: github.event_name == 'pull_request' && github.ref != 'refs/heads/main'
        with:
          name: pages
          path: public
          if-no-files-found: error
          retention-days: 1
      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public

